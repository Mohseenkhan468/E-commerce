// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                       Int      @id @default(autoincrement())
  name                     String
  email                    String   @unique
  password                 String
  role                     Role     @default(USER)
  default_shipping_address Int?
  default_billing_address  Int?
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  addresses  Address[]
  cart_items CartItems[]
  orders     Order[]

  @@map("users")
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  tags        Json
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  cart_items  CartItems[]
  orders      OrderProduct[]

  @@map("products")
}

model Address {
  id         Int      @id @default(autoincrement())
  line_one   String
  line_two   String
  city       String
  country    String
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")
}

model CartItems {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id         Int            @id @default(autoincrement())
  user_id    Int
  user       User           @relation(fields: [user_id], references: [id])
  net_amount Decimal
  address    String
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  products   OrderProduct[]
  events     OrderEvent[]
  status  OrderEventStatus @default(PENDING)
  @@map("orderproducts")
}

model OrderProduct {
  id         Int     @id @default(autoincrement())
  order_id   Int
  order      Order   @relation(fields: [order_id], references: [id])
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
  quantity   Int

  @@map("order_products")
}

model OrderEvent {
  id         Int              @id @default(autoincrement())
  order_id   Int
  order      Order            @relation(fields: [order_id], references: [id])
  status     OrderEventStatus @default(PENDING)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("order_events")
}
